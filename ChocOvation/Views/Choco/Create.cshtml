@model ChocOvation.ViewModels.ChocoDoseViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Choco</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Choco.ChocoName, "ChocoName", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Choco.ChocoName, new { @class = "form-control", autofocus = "autofocus" })
                @Html.ValidationMessageFor(model => model.Choco.ChocoName, "", new { @class = "text-danger" })
            </div>
        </div>

        @{
            //var list = Model.DosesViewModel.ToList();
            for (int x = 0; x < Model.DosesViewModel.Count(); x++)
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.DosesViewModel[x].MaterialName, "MaterialName", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.DosesViewModel[x].MaterialName,  new { @readonly = "readonly", @class = "form-control", autofocus = "autofocus" })
                        @Html.ValidationMessageFor(model => model.DosesViewModel[x].MaterialName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.DosesViewModel[x].QuantityPer100gr, "QuantityPer100gr", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DosesViewModel[x].QuantityPer100gr, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DosesViewModel[x].QuantityPer100gr, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
        }
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


@*@{
        foreach (var dose in Model.DosesViewModel)
        {
            <div class="form-group">
                @Html.LabelFor(model => dose.MaterialName, "Material Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => dose.MaterialName, new { @readonly = "readonly", @class = "form-control", autofocus = "autofocus" })
                    @Html.ValidationMessageFor(model => dose.MaterialName, "", new { @class = "text-danger" })
                </div>
            </div>
                <div class="form-group">
                    @Html.LabelFor(model => dose.QuantityPer100gr, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(m => dose.QuantityPer100gr, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => dose.QuantityPer100gr, "", new { @class = "text-danger" })
                    </div>
                </div>
        }
    }*@